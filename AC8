import random

def fill_cube():
    """Preenche o cubo com valores aleatórios."""
    cube = [[[random.randint(0, 100) for _ in range(50)] for _ in range(50)] for _ in range(50)]
    return cube

def find_sum(cube):
    """Encontra a soma dos valores armazenados no cubo."""
    total_sum = sum(sum(sum(row) for row in matrix) for matrix in cube)
    return total_sum

def find_occurrences(cube, value):
    """Encontra o número de ocorrências de um valor no cubo."""
    count = sum(sum(row.count(value) for row in matrix) for matrix in cube)
    return count

def find_max_value(cube):
    """Encontra o maior valor armazenado no cubo."""
    max_value = max(max(max(row) for row in matrix) for matrix in cube)
    return max_value

def find_positions(cube, value):
    """Encontra as posições onde aparece o maior valor no cubo."""
    positions = []
    for x, matrix in enumerate(cube):
        for y, row in enumerate(matrix):
            for z, val in enumerate(row):
                if val == value:
                    positions.append((x, y, z))
    return positions

# Função principal
def main():
    # Preenchimento do cubo com valores aleatórios
    cube = fill_cube()

    # Soma dos valores no cubo
    total_sum = find_sum(cube)
    print("Soma dos valores no cubo:", total_sum)

    # Número de ocorrências do valor 90
    occurrences_90 = find_occurrences(cube, 90)
    print("Número de ocorrências do valor 90:", occurrences_90)

    # Maior valor no cubo
    max_value = find_max_value(cube)
    print("Maior valor no cubo:", max_value)

    # Posições onde aparece o maior valor
    positions = find_positions(cube, max_value)
    print("Posições onde aparece o maior valor:")
    for pos in positions:
        print(pos)

if __name__ == "__main__":
    main()
